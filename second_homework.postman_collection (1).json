{
	"info": {
		"_postman_id": "10ebd4e4-7ce9-4869-9541-ea465b843b72",
		"name": "second_homework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить responce body в json\r",
							"var jsonData = pm.response.json(); \r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request(name вбить руками)\r",
							"pm.test(\"User name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql (\"Andrey\");\r",
							"});\r",
							"console.log(\"Request = \" + jsonData.name)\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request(age вбить руками)\r",
							"pm.test(\"User age\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"console.log(\"Request = \" + jsonData.age)\r",
							"\r",
							"// 6. Проверить, что в salary ответе равно salary s request(salary вбить руками)\r",
							"pm.test(\"User salary\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"console.log(\"Request = \" + jsonData.salary)\r",
							"\r",
							"// 7. Спарсить request\r",
							"let reqData = request.data;\r",
							"console.log(\"Request = \", reqData);\r",
							"\r",
							"// 8. Проверить, что в name ответе равно name s request(name забрать из request)\r",
							"pm.test(\"User name_2\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"console.log(\"name_2 = \", reqData.name);\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request(age забрать из request)\r",
							"pm.test(\"User age_2\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"console.log(\"age_2 = \", reqData.age);\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request(salary забрать из request)\r",
							"let req_salary = +reqData.salary;\r",
							"pm.test(\"User salary_2\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"salary_2 = \", req_salary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"console.log(\"Response = \", jsonData);\r",
							"\r",
							"// 4. Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"console.log(\"Request = \", reqData);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"let req_salary = +reqData.salary;\r",
							"pm.test(\"Check salary\", function (){\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"Request salary \", req_salary, typeof(req_salary));\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response. \r",
							"console.log(\"Family information \", jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has name\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"name\")});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog has age\",()=> {\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"age\")});\r",
							"\r",
							"// 11.Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name Luky\", function (){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log (\"name Luky\", jsonData.family.pets.dog.name ===(\"Luky\"));\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let age_4 = +jsonData.family.pets.dog.age;\r",
							"pm.test(\"Check age 4\", function (){\r",
							"    pm.expect(age_4).to.eql(4);\r",
							"})\r",
							"console.log(\"dog age = \", age_4, typeof(age_4))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"console.log (\"response\", jsonData)\r",
							"\r",
							"// 4. Спарсить request\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"console.log(\"request \", reqData)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test (\"check name\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"console.log (\"NAME \", jsonData.name, reqData.name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"check age\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"});\r",
							"console.log(\"AGE \", reqData.age, typeof(reqData.age))\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"SALARY_REQ \", reqData.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"SALARY_RESP \", jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"SALARY_0_RESP \", jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(\"SALARY_1_RESP \", jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(\"SALARY_2_RESP \", jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"check salary 0\", function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"console.log(\"CHECK_0_SALARY \",reqData.salary, typeof(reqData.salary))\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).\r",
							"let RESP_1 = +jsonData.salary[1];\r",
							"pm.test(\"check salary 1\", function (){\r",
							"    pm.expect(RESP_1).to.eql(reqData.salary*2);\r",
							"});\r",
							"console.log(\"CHECK_1_SALARY \", reqData.salary*2, RESP_1, typeof(reqData.salary*2), typeof(RESP_1))\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request).\r",
							"let RESP_2 = +jsonData.salary[2];\r",
							"pm.test(\"check salary 2\", function (){\r",
							"    pm.expect(RESP_2).to.eql(reqData.salary*3);\r",
							"});\r",
							"console.log(\"CHECK_2_SALARY \", RESP_2, reqData.salary*3, typeof(RESP_2), typeof(reqData.salary*3))\r",
							"\r",
							"// 18.Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let obj = jsonData.salary;\r",
							"for (let key in obj){\r",
							"    console.log(obj[key]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=32&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6.Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7.Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10.Проверить, что json response имеет параметр qa_salary_after_12_months \r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"\r",
							"// 11.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"\r",
							"// 12.Проверить, что json response имеет параметр qa_salary_after_3.5_years \r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"\r",
							" // 13.Проверить, что json response имеет параметр person\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData).to.property(\"person\");\r",
							"    });\r",
							"\r",
							"// 14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check person and age\", function (){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// 21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary after 5 years\", function (){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22.***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let obj = jsonData.person;\r",
							"for (let key in obj){\r",
							"    console.log(obj[key]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}